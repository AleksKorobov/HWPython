a = input() # по умолчанию присваивается str
print(a)       # 123 → '123'

a = int(input()) # оборачивание int() если нужно числовое значение
print(a)                  # 123 → 123

a, b, c = input().split() # множественное присваивание str с пробелом
 в качестве разделителя (в .split() можно указать любой разделитель,
  отсутствие аргумента в .split() означает использование пробела в качестве разделителя))
print(b)         # scissors paper stone → paper

a, b, c = map(int, input().split()) # множественное присваивание int
с пробелом в качестве разделителя (в .split() можно указать любой разделитель,
отсутствие аргумента в .split() означает использование пробела в качестве разделителя)
print(b)                             2

a = list(input()) # создание списка из каждого символа введенной строки 
(пробел при вводе тоже воспринимается как символ)
print(a)                    # letters → ['l', 'e', 't', 't', 'e', 'r', 's']

a = list(map(int, input())) # создание списка из каждой цифры введенного числа 
(пробелы при вводе вызовут ошибку)
print(a)                    # 123456 → [1, 2, 3, 4, 5, 6]

a = list(input().split()) # создание списка из отдельных строк (в .split()
 можно указать любой разделитель, отсутствие аргумента в .split() означает 
 использование пробела в качестве разделителя)
print(a)                    # letters words → ['letters', 'words']

3
Что умеет делать компьютерная программа? Переменные, как ссылки на объекты, хранящие данные. 
Оператор присваивания. Каскадное и множественное присваивание. Динамическая типизация. Функции
 type() и id(). Как правильно выбирать имена переменных. Ограничения на определение имен
  переменных.

4. Числовые типы, арифметические операции 
Базовые числовые типы в Python: int, float, complex. Арифметические операции: сложение, вычитание,
 деление, целочисленное деление, умножение, вычисление остатка от деления, возведение в степень.
  Краткие операторы: +=, -=, *=, /=, **=. Примеры и особенности выполнения.

5. Математические функции и работа с модулем math 
Рассматриваются встроенные математические функции языка Python: 
abs() - для вычисления модуля числа
min(), max() - для нахождения минимального и максимального чисел
pow() - возведение в степень
round() - округление чисел.
А также некоторые функции из модуля math:
math.ceil() и math.floor() - для округления до наибольшего и наименьшего целого
math.factorial() - для нахождения факториала числа
math.trunc() и int() - отбрасывает дробную часть числа
math.log2(), math.log10() и math.log() - вычисление логарифмов по разным основаниям
math.sqrt() - вычисление квадратного корня
math.sin() и math.cos() - вычисление синуса и косинуса угла
math.pi - константа пи
math.e - константа e.

6.Функции print() и input(). Преобразование строк в числа int() и float() 
Узнаете как применять в программах функцию print() для вывода информации в консоль
 и функцию input() для ввода информации с клавиатуры. Параметры sep и end функции 
 print(). Преобразование строк в числа с помощью функций int() и float().

7. Логический тип bool. Операторы сравнения и операторы and, or, not
Рассказывается о работе операторов сравнения и операторах and, or, not для 
формирования составных условий. Узнаете о работе функции bool(), а
 также познакомитесь с многочисленными примерами логических выводов.
 n= float(input())
n= int(n)

8 Введение в строки. Базовые операции над строками 
Узнаете как задавать обычные и многострочные строки в Python. Символ переноса
 строки. Соединение (конкатенация) строк, функция str() для преобразования
  аргумента в строку, дублирование строкового фрагмента, функция len() для 
  вычисления длины строки, оператор in для проверки вхождения подстроки в строку, 
  операторы сравнения строк: ==, !=, больше, меньше. Функция ord().

9.Строка, как упорядоченный набор символов. Индексирование строк, обращение
 к символам по определенным индексам. Срезы строк - выделение групп символов из
  строки. Примеры и особенности работы.

10. Основные методы строк
Узнаете, что такое методы, как они вызываются и какие основные методы существуют у строк:
String.upper() - Возвращает строку с заглавными буквами
String.lower() - Возвращает строку с малыми буквами
String.count(sub[, start[, end]]) - Определяет число вхождений подстроки в строке
String.find(sub[, start[, end]]) - Возвращает индекс первого найденного вхождения
String.rfind(sub[, start[, end]]) - Возвращает индекс первого найденного вхождения при поиске справа
String.index(sub[, start[, end]]) - Возвращает индекс первого найденного вхождения
String.replace(old, new, count=-1) - Заменяет подстроку old на new
String.isalpha() - Определяет: состоит ли строка целиком из буквенных символов
String.isdigit() - Определяет: состоит ли строка целиком из цифр
String.rjust(width[, fillchar = ‘ ‘]) - Расширяет строку, добавляя символы слева
String.ljust(width[, fillchar = ‘ ‘]) - Расширяет строку, добавляя символы справа
String.split(sep=None, maxsplit=-1) - Разбивает строку на подстроки
String.join(список) - Объединяет коллекцию в строку
String.strip() - Удаляет пробелы и переносы строк справа и слева
String.rstrip() - Удаляет пробелы и переносы строк справа
String.lstrip() - Удаляет пробелы и переносы строк слева

11. Спецсимволы, экранирование символов, raw-строки
Работаем со спецсимволами строк: 
\n - перевод строки;
\t - табуляция;
\\ - обратный слеш
\' и \" - экранирование кавычек
Понятие экранирования и зачем это нужно. Примеры. Введение в raw-строки (сырые строки).

12. Форматирование строк: метод format и F-строки 
Способ формирования строки по шаблону с помощью метода format(). Форматирование строк,
 используя F-строки.

13. Списки - операторы и функции работы с ними 
Что такое списки, зачем нужны, как задавать в Python. Функция list() для создания списков.
 Обращение к отдельным элементам списка по индексу. Функции len(), max(), min(), sum(), 
 sorted(). Операторы +, *, in, del.

 14. Срезы списков и сравнение списков
Узнаете как выделять группы элементов из список с помощью срезов, а также выполнять
 групповое присваивание. Рассматриваются операторы сравнения: равно, не равно, больше и меньше.

15. Основные методы списков
В уроке рассматриваются следующие базовые методы для списков:
 append()добавление в конец спика, lst.append(bool) -
  insert(),вставляет элемент в указанное множественное lst.insert(0, 8)
 remove(), удаляет элемент по значению lst.remove("+")
  pop(), удаляет последний элемент либо элемент с указанным индексом a=lst.pop() удаленное добавляем новый список
 clear(),
  copy(),
  count()
  index(),
reverse() меняет порядок следования элементов на обратный lst= sorted(lst, reverse=True)
sort(). сортирует элементы списка
+ соединение двух списков в один lst = cities + lst
* дублирование списка
in проверка вхождения элемента в список
del удаление элемента списка
print(v[:3])
print(v[-4:])
print(c[0::2])
m1=m[2:7]
print(m1[::-1]) -вывести в обратном порядке
[1, 2, 3] > [1, 1, 10] = True 
[1, 2, 3] < [1, 2, 3, 4]
lst = list(map(int, input().split()))
a, b =map(float, input().split())
"формулу" палиндрома  a[::]==a[::-1]
if int(a[-1])==7:

